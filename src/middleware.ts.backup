import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Rate limiting store (in production, use Redis or similar)
const rateLimitStore = new Map<string, { count: number; resetTime: number }>()

// Rate limiting configuration
const RATE_LIMIT = {
  windowMs: 60 * 1000, // 1 minute
  maxRequests: 100, // 100 requests per minute
}

// Protected routes that require authentication
const protectedRoutes = [
  '/dashboard',
  '/profile',
  '/quiz',
  '/recommendations',
]

// Admin-only routes
const adminRoutes = [
  '/admin',
]

// College-only routes
const collegeRoutes = [
  '/colleges/manage',
  '/colleges/dashboard',
]

// Public routes that don't require authentication
const publicRoutes = [
  '/',
  '/about',
  '/contact',
  '/features',
  '/auth/login',
  '/auth/signup',
  '/auth/callback',
  '/offline',
]

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // Rate limiting
  const clientIp = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown'
  const rateLimitKey = `${clientIp}:${pathname}`
  
  const now = Date.now()
  const rateLimitData = rateLimitStore.get(rateLimitKey)
  
  if (rateLimitData) {
    if (now > rateLimitData.resetTime) {
      // Reset the counter
      rateLimitStore.set(rateLimitKey, { count: 1, resetTime: now + RATE_LIMIT.windowMs })
    } else if (rateLimitData.count >= RATE_LIMIT.maxRequests) {
      // Rate limit exceeded
      return new NextResponse(
        JSON.stringify({ 
          error: 'Rate limit exceeded',
          message: 'Too many requests. Please try again later.'
        }),
        { 
          status: 429,
          headers: { 
            'Content-Type': 'application/json',
            'Retry-After': '60'
          }
        }
      )
    } else {
      // Increment counter
      rateLimitData.count++
    }
  } else {
    // First request
    rateLimitStore.set(rateLimitKey, { count: 1, resetTime: now + RATE_LIMIT.windowMs })
  }

  // Clean up old rate limit entries
  if (Math.random() < 0.01) { // 1% chance to clean up
    for (const [key, data] of rateLimitStore.entries()) {
      if (now > data.resetTime) {
        rateLimitStore.delete(key)
      }
    }
  }

  // CORS headers
  const response = NextResponse.next()
  
  // Set CORS headers
  response.headers.set('Access-Control-Allow-Origin', process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000')
  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  response.headers.set('Access-Control-Allow-Credentials', 'true')

  // Handle preflight requests
  if (request.method === 'OPTIONS') {
    return new NextResponse(null, { status: 200, headers: response.headers })
  }

  // Skip authentication for public routes
  if (publicRoutes.some(route => pathname.startsWith(route))) {
    return response
  }

  // Skip authentication for API routes (they handle their own auth)
  if (pathname.startsWith('/api/')) {
    return response
  }

  // Skip authentication for static files
  if (pathname.startsWith('/_next/') || 
      pathname.startsWith('/icons/') || 
      pathname.startsWith('/favicon') ||
      pathname.endsWith('.svg') ||
      pathname.endsWith('.png') ||
      pathname.endsWith('.jpg') ||
      pathname.endsWith('.jpeg') ||
      pathname.endsWith('.ico')) {
    return response
  }

  try {
    // Check if route requires authentication
    const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route))
    const isAdminRoute = adminRoutes.some(route => pathname.startsWith(route))
    const isCollegeRoute = collegeRoutes.some(route => pathname.startsWith(route))

    // For now, let client-side handle authentication to prevent redirect loops
    // In production, you would verify JWT tokens here
    if (isProtectedRoute || isAdminRoute || isCollegeRoute) {
      console.log('Middleware - Protected route detected, allowing access (client-side auth will handle it)')
      return response
    }

    return response

  } catch (error) {
    console.error('Middleware error:', error)
    return response
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
